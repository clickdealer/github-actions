name: tlz-checks

on:
  workflow_call:
    inputs:
      artifact_plan_name:
        type: string
        required: false
        description: Artifact name containing the planfile
      configuration_aliases:
        type: boolean
        required: false
        default: false
        description: Hack to generate a providers file based on configuration_aliases

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

jobs:
  checkov:
    runs-on: ubuntu-latest
    steps:
      - name: prepare workspace
        uses: clickdealer/github-actions/.github/actions/tlz-prepare-workspace@edge
        with:
          artifact_plan_name: ${{ inputs.artifact_plan_name }}
          setup_terraform: 'false'

      - name: checkov
        uses: bridgecrewio/checkov-action@v12.1211.0
        with:
          download_external_modules: 'true'
          framework: ${{ inputs.artifact_plan_name && 'terraform_plan' || 'terraform' }}
          quiet: 'true'

  terrascan:
    runs-on: ubuntu-latest
    steps:
      - name: prepare workspace
        uses: clickdealer/github-actions/.github/actions/tlz-prepare-workspace@edge
        with:
          artifact_plan_name: ${{ inputs.artifact_plan_name }}
          setup_terraform: ${{ inputs.artifact_plan_name && 'false' || 'true' }}

      - name: terrascan config file exists
        uses: andstor/file-existence-action@v1
        id: config_file
        with:
          files: .terrascan.yaml

      # hack as terrascan doesn't support 1.0 yet
      - name: set tfplan version to 0.1
        uses: jossef/action-set-json-field@v1
        if: inputs.artifact_plan_name
        with:
          file: plan.json
          field: format_version
          value: '0.1'

      - name: terrascan
        uses: accurics/terrascan-action@v1
        with:
          config_path: ${{ steps.config_file.outputs.files_exists == 'true' && '.terrascan.yaml' || null }}
          iac_dir: ${{ inputs.artifact_plan_name && '. -f plan.json' || '.' }}
          iac_type: ${{ inputs.artifact_plan_name && 'tfplan' || 'terraform' }}
          non_recursive: 'true'
          verbose: 'true'

  tfdocs:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: terraform docs
        uses: terraform-docs/gh-actions@v0
        with:
          fail-on-diff: 'true'
          output-file: readme.md

  tffmt:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

        # todo: replace with custom fmt code, then we can reuse our 'prepare-workspace'
      - name: terraform fmt
        uses: dflook/terraform-fmt-check@v1

  tflint:
    runs-on: ubuntu-latest
    steps:
      - name: prepare workspace
        uses: clickdealer/github-actions/.github/actions/tlz-prepare-workspace@edge

      - name: cache tflint plugins
        uses: actions/cache@v2
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - name: install tflint
        uses: terraform-linters/setup-tflint@v1

      - name: tflint init
        run: tflint --init

      - name: tflint
        run: tflint -f compact --module

  tfsec:
    runs-on: ubuntu-latest
    steps:
      - name: prepare workspace
        uses: clickdealer/github-actions/.github/actions/tlz-prepare-workspace@edge

      - name: tfsec # todo: replace with https://github.com/aquasecurity/tfsec-pr-commenter-action
        uses: reviewdog/action-tfsec@v1
        with:
          github_token: ${{ secrets.github_token }}
          fail_on_error: 'true'

  tfvalidate:
    runs-on: ubuntu-latest
    steps:
      - name: prepare workspace
        uses: clickdealer/github-actions/.github/actions/tlz-prepare-workspace@edge

      # the 'go' steps resolve a validation issue when using configuration_aliases
      # https://github.com/hashicorp/terraform/issues/28490

      - name: setup go
        if: inputs.configuration_aliases == true
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: install terraform-config-inspect
        if: inputs.configuration_aliases == true
        run: go install github.com/hashicorp/terraform-config-inspect@v0.0.0-20211115214459-90acf1ca460f

      - name: generate aliased-providers.tf.json
        if: inputs.configuration_aliases == true
        run: |
          terraform-config-inspect --json . | jq -r '
            [.required_providers[].aliases]
            | flatten
            | del(.[] | select(. == null))
            | reduce .[] as $entry (
              {};
              .provider[$entry.name] //= [] | .provider[$entry.name] += [{"alias": $entry.alias}]
            )
          ' | tee aliased-providers.tf.json

      # todo: replace with custom validation code, then we can reuse our 'prepare-workspace'
      - name: terraform validate
        uses: dflook/terraform-validate@v1
